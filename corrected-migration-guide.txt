üìã MANUAL MIGRATION GUIDE - Out Sports QC
==========================================

Since automatic migration isn't available, please follow these manual steps:

üéØ STEP 1: Website Feedback Table
--------------------------------
Purpose: Stores user bug reports and suggestions

üëâ Instructions:
1. Open your Supabase dashboard: https://supabase.com/dashboard
2. Navigate to: SQL Editor
3. Copy and paste the contents of: supabase/migrations/create_website_feedback_table.sql
4. Click 'Run' to execute the SQL

üéØ STEP 2: Registration Details Table
------------------------------------
Purpose: Admin-configurable registration form fields (the 6 boxes at top of registration form)

üëâ Instructions:
1. In the same SQL Editor
2. Copy and paste the contents of: supabase/migrations/20250730_add_registration_details.sql
3. Click 'Run' to execute the SQL

üìÅ FILE LOCATIONS:
==================
File 1: /Users/travisstanger/out-sports-qc/supabase/migrations/create_website_feedback_table.sql
File 2: /Users/travisstanger/out-sports-qc/supabase/migrations/20250730_add_registration_details.sql

‚úÖ WHAT YOU'LL GET AFTER RUNNING THESE:
=======================================

üîß New Admin Dashboard Features:
  ‚Ä¢ Website Feedback section - View/manage user bug reports
  ‚Ä¢ Registration Details editor - Configure the 6 info boxes on registration form

üåê Updated User Experience:
  ‚Ä¢ Menu: 'General Info' is now 'About Us'
  ‚Ä¢ Join buttons redirect to '#registration'
  ‚Ä¢ Registration form uses your admin-configured values

üéØ TESTING YOUR CHANGES:
========================
1. After running the SQL migrations:
2. Visit your admin dashboard
3. Go to 'Registrations' ‚Üí 'Registration Details' tab
4. Update the 6 text fields (Sport, Season, Duration, Game Time, Location, Team Size)
5. Visit the registration page to see your changes

üìù SQL FILES CONTENT:
====================

üóÇÔ∏è  File 1 Content (Website Feedback):
--------------------------------------
-- Create website_feedback table for storing user feedback, bug reports, and suggestions
-- This table supports the feedback system in the Out Sports League Management app

CREATE TABLE IF NOT EXISTS website_feedback (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  url TEXT NOT NULL,
  user_agent TEXT NOT NULL,
  issue_description TEXT NOT NULL,
  feedback_type TEXT CHECK (feedback_type IN ('bug', 'suggestion', 'content', 'other')) DEFAULT 'other',
  status TEXT CHECK (status IN ('new', 'in_progress', 'resolved', 'dismissed')) DEFAULT 'new',
  priority TEXT CHECK (priority IN ('low', 'medium', 'high')) DEFAULT 'medium',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT TIMEZONE('utc'::text, NOW()) NOT NULL,
  resolved_at TIMESTAMP WITH TIME ZONE,
  admin_notes TEXT
);

-- Create indexes for common queries
CREATE INDEX IF NOT EXISTS idx_website_feedback_status ON website_feedback(status);
CREATE INDEX IF NOT EXISTS idx_website_feedback_priority ON website_feedback(priority);
CREATE INDEX IF NOT EXISTS idx_website_feedback_feedback_type ON website_feedback(feedback_type);
CREATE INDEX IF NOT EXISTS idx_website_feedback_created_at ON website_feedback(created_at);

-- Enable Row Level Security (RLS)
ALTER TABLE website_feedback ENABLE ROW LEVEL SECURITY;

-- Create policies for different user roles
-- Allow all authenticated users to create feedback
CREATE POLICY "Enable insert for authenticated users" ON website_feedback
  FOR INSERT WITH CHECK (auth.role() = 'authenticated');

-- Allow admins to view all feedback
CREATE POLICY "Enable read for admins" ON website_feedback
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM user_profiles 
      WHERE user_profiles.id = auth.uid() 
      AND user_profiles.is_admin = true
    )
  );

-- Allow admins to update feedback (status, priority, admin notes)
CREATE POLICY "Enable update for admins" ON website_feedback
  FOR UPDATE USING (
    EXISTS (
      SELECT 1 FROM user_profiles 
      WHERE user_profiles.id = auth.uid() 
      AND user_profiles.is_admin = true
    )
  );

-- Allow admins to delete feedback if needed
CREATE POLICY "Enable delete for admins" ON website_feedback
  FOR DELETE USING (
    EXISTS (
      SELECT 1 FROM user_profiles 
      WHERE user_profiles.id = auth.uid() 
      AND user_profiles.is_admin = true
    )
  );

-- Create a function to automatically update the updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = TIMEZONE('utc'::text, NOW());
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create trigger to automatically update updated_at
DROP TRIGGER IF EXISTS update_website_feedback_updated_at ON website_feedback;
CREATE TRIGGER update_website_feedback_updated_at
    BEFORE UPDATE ON website_feedback
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Comment on table and columns for documentation
COMMENT ON TABLE website_feedback IS 'Stores user feedback, bug reports, and suggestions for the website';
COMMENT ON COLUMN website_feedback.id IS 'Unique identifier for the feedback entry';
COMMENT ON COLUMN website_feedback.url IS 'The URL where the feedback was submitted from';
COMMENT ON COLUMN website_feedback.user_agent IS 'Browser user agent string for debugging context';
COMMENT ON COLUMN website_feedback.issue_description IS 'The actual feedback/issue description from the user';
COMMENT ON COLUMN website_feedback.feedback_type IS 'Category of feedback: bug, suggestion, content, or other';
COMMENT ON COLUMN website_feedback.status IS 'Current status: new, in_progress, resolved, or dismissed';
COMMENT ON COLUMN website_feedback.priority IS 'Priority level: low, medium, or high';
COMMENT ON COLUMN website_feedback.resolved_at IS 'Timestamp when the feedback was marked as resolved';
COMMENT ON COLUMN website_feedback.admin_notes IS 'Internal notes added by administrators';


üóÇÔ∏è  File 2 Content (Registration Details):
------------------------------------------
-- Create registration_details table to store configurable registration form information
CREATE TABLE IF NOT EXISTS registration_details (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    sport TEXT NOT NULL,
    season TEXT NOT NULL,
    duration TEXT NOT NULL,
    game_time TEXT NOT NULL,
    location TEXT NOT NULL,
    team_size TEXT NOT NULL,
    sport_type TEXT NOT NULL CHECK (sport_type IN ('kickball', 'dodgeball')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Add RLS (Row Level Security)
ALTER TABLE registration_details ENABLE ROW LEVEL SECURITY;

-- Allow public read access to registration details
CREATE POLICY "Public users can view registration details" ON registration_details
    FOR SELECT USING (true);

-- Only authenticated users can modify registration details
CREATE POLICY "Authenticated users can modify registration details" ON registration_details
    FOR ALL USING (auth.role() = 'authenticated');

-- Insert default values for kickball
INSERT INTO registration_details (sport, season, duration, game_time, location, team_size, sport_type)
VALUES ('Kickball', 'Fall 2025', '7 weeks', 'Sundays 2-4pm', 'TBD', '16 players', 'kickball')
ON CONFLICT DO NOTHING;

-- Create updated_at trigger
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_registration_details_updated_at 
    BEFORE UPDATE ON registration_details 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

‚úÖ SUMMARY: Copy and run both SQL files in your Supabase dashboard's SQL Editor!
